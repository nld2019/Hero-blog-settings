{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/CWNA-标准、行业组织与通信基础知识概述.md","hash":"597a70b98fa24ac6628133a0f15473c2ad7f1e87","modified":1641458050923},{"_id":"source/_posts/SVN服务仓库搭建记录.md","hash":"3a5cf4d177b72fb280fb7091ab1fa26a499c4b6b","modified":1639725372696},{"_id":"source/_posts/Step-by-step-to-build-personal-blog.md","hash":"dbc09ebe5166d7cd005ef33b5d140e50dfe89b69","modified":1639234706372},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1639234706373},{"_id":"source/_posts/vim-cscope-ctags阅读源码.md","hash":"f4cbfcc11aa70a681d7a840d0bd0e2a7598dded5","modified":1640154791719},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639234706390},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1639234706428},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1639234706515},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1639234706491},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1639234706428},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1639234706493},{"_id":"themes/yilia/_config.yml","hash":"ac9d53e79e853bd28d1ada6314350d8a453ffff7","modified":1640155121409},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1639234706494},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1639234706426},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1639234706495},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1639234706432},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1639234706376},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1639234706430},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1639234706431},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1639234706434},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1639234706430},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1639234706426},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1639234706433},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1639234706425},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1639234706378},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1639234706424},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1639234706435},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1639234706450},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639234706422},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639234706421},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1639234706505},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1639234706423},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1639234706386},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1639234706508},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1639234706452},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1639234706414},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1639234706413},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1639234706418},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1639234706412},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1639234706387},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1639234706392},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1639234706390},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1639234706420},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1639234706382},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1639234706393},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1639234706417},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1639234706416},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1639234706380},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"910b3adca0e1c65fbfa82c4599f843ee79a247bc","modified":1639234706384},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1639234706419},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1639234706453},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1639234706475},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1639234706462},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1639234706479},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1639234706478},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1639234706483},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1639234706490},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1639234706467},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1639234706484},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1639234706473},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1639234706468},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1639234706459},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1639234706478},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1639234706457},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1639234706473},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1639234706477},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1639234706480},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1639234706454},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1639234706481},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1639234706456},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1639234706455},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1639234706457},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1639234706460},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1639234706482},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1639234706458},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1639234706461},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1639234706474},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1639234706440},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1639234706442},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1639234706449},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1639234706444},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1639234706445},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1639234706441},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1639234706437},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1639234706438},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1639234706439},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1639234706443},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1639234706447},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1639234706448},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1639234706500},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1639234706501},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1639234706503},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1639234706511},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1639234706497},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1639234706504},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1639234706499},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1639234706512},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"534b12ebc22d21ac565b20045e7382f0bb4c29e7","modified":1639234706409},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1639234706397},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1639234706514},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1639234706407},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1639234706399},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1639234706396},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1639234706408},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1639234706401},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1639234706402},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1639234706463},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1639234706466},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1639234706404},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1639234706467},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1639234706489},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1639234706488},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1639234706464},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1639234706487},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1639234706486},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1639234706469},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1639234706472},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1639234706470},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1639234706465},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1639234706405},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1639234706509},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1639234706506},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1639234706411},{"_id":"public/content.json","hash":"ae154560b0e2236a48e8f7fe4c0f8f209d2656c3","modified":1641458814733},{"_id":"public/2022/01/06/CWNA-标准、行业组织与通信基础知识概述/index.html","hash":"bcfcfb905f3c69d9589b7375a87593f75db1fdae","modified":1641458814733},{"_id":"public/2021/12/22/vim-cscope-ctags阅读源码/index.html","hash":"e98d887f5955083e37042366bb54a1b02a3449f1","modified":1641458814733},{"_id":"public/2021/12/16/SVN服务仓库搭建记录/index.html","hash":"76aa6c78c749601c768d4cbd2ad8b3f73633353b","modified":1641458814733},{"_id":"public/2021/12/11/hello-world/index.html","hash":"d2131e1c538c1967f2a9e60e60ffa74a16ff532e","modified":1641458814733},{"_id":"public/2021/12/08/Step-by-step-to-build-personal-blog/index.html","hash":"92202b191d5a1ebe530b132a01ace7fcdc680e0d","modified":1641458814733},{"_id":"public/index.html","hash":"d730612fc72cc5980a2d24d3a69d2a372229df23","modified":1641458814733},{"_id":"public/archives/index.html","hash":"0a652ef2f365bfd8c8c5516d099c6a66d164c62b","modified":1641458814733},{"_id":"public/archives/2021/index.html","hash":"4b5e85393e7f7f1f61728102973669e0f08c6071","modified":1641458814733},{"_id":"public/archives/2021/12/index.html","hash":"789cfc9ea0fccf6fca3141d12cccb9e398d44165","modified":1641458814733},{"_id":"public/archives/2022/index.html","hash":"3f790e52682dc7e334b40ede4ba297ac793a2b20","modified":1641458814733},{"_id":"public/archives/2022/01/index.html","hash":"ffab0417b28258e637c1712520cabd6122cdf972","modified":1641458814733},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1641458814733},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1641458814733},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1641458814733},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1641458814733},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1641458814733},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1641458814733},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1641458814733},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1641458814733},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1641458814733},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1641458814733},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1641458814733},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1641458814733},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1641458814733}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"CWNA:标准、行业组织与通信基础知识概述","date":"2022-01-06T06:34:03.000Z","_content":"1.无线局域网的发展历程\n2.标准组织\n  美国通信联邦委员会\n  国际电信联盟无线电通信部门\n  电气和电子工程师协会\n  互联网工程任务组\n  Wi-Fi联盟\n  国际标准化组织\n3.核心层、分布层与接入层\n4.通信基础知识\n  通信术语\n  载波信号\n  键控法\n\n## 无线局域网的发展历程\n19世纪，迈克尔·法拉第、詹姆斯·克拉克·麦克斯韦、海因里希·鲁道夫·赫兹、尼古拉·特斯拉、大卫、爱德华·休斯、\n托马斯·爱迪生、古列尔莫·马可尼等许多发明家与科学家开始进行无线通信方面的实验。\n1970年，第一种无线网络ALOHAnet在美国夏威夷大学诞生，这种网络以无线方式在夏威夷群岛之间传输数据。一般认\n为，ALOHAnet使用的技术奠定了802.3以太网CSMA/CD和802.11无线局域网CSMA/CA技术基础。\n20世纪90年代，低速无线网络产品开始商用，多数工作在900MHz频段。1991年，IEEE开始讨论无线局域网技术的标准\n化问题。1997年，IEEE批准通过802.11原始标准。\n1999年，IEEE批准通过数据速率较高的802.11b修正案。支持高达11Mbps的速率，无线局域网开始大规模商用。\n802.11技术营销术语称为Wi-Fi，被全球数十亿人公认为无线局域网络的代名词。\n\n## 标准组织\n   各种标准组织共同对无线网络行业进行监管和规范。\n监管机构：\n   国际电信联盟无线电通信部门(ITU-R)以及美国联邦通信委员会(FCC)等监管机构负责制定规则，以约束用户使用无线电的行为。这\n些机构管理通信频率，功率电平，传输方法，共同致力于规范日益壮大的无线用户。\n\n标准组织：\n   电气和电子工程师协会(IEEE)负责确保网络设备兼容与共存的标准。\n   互联网工程任务组(IETF)负责制定互联网标准。\n   Wi-Fi联盟(Wi-Fi Alliance)对无线网络设备进行认证测试，以确保他们符合无线局域网通信协议,实现设备兼容。\n   国际标准化组织(ISO)创建了开放系统互连模型。\n\n\n监管机构负责授权频谱和非授权频谱的管理。非授权频谱需要申请牌照。授权频谱和非授权频谱受6个方面的监管。\n   频率\n   带宽\n   有意辐射器的最大功率\n   最大等效全向辐射功率\n   使用（室内与室外）\n   频谱共享规则\n\n国际电信联盟无线电通信部门(ITU-R)承担全球频谱管理任务。致力于确保陆地、海洋与空中的通信活动不受干扰，通过\n5大行政区维护一个全球性的频率分配数据库。5大行政区：\n   行政区A:美洲\n   行政区B:西欧\n   行政区C:东欧与北亚\n   行政区D:非洲\n   行政区E:亚洲与澳大拉西亚\n\n除行政区外，还设3个由地理界定的无线电监管区:\n   监管区1:欧洲、中东与非洲\n   监管区2:美洲\n   监管区3:亚洲与大洋洲\n\n除了上述组织，各国设置自己的监管机构。\n\n\nOSI模型\n第七层        应用层\n第六层        表示层\n第五层        会话层\n第四层        传输层\n第三层        网络层\n第二层        数量链路层 : LLC子层和MAC子层\n第一层        物理层\n\n\n## 核心层、分布层与接入层\n网络的核心层：由高速主干网络构成，高速主干网相当于网络中的“高速公路”，其核心目标是在重要的数据中心和\n分布区域之间传输大量信息，如同高速公路连接城市与都会区一样。核心层既不负责流量路由，也不负责操作数据\n包，它的任务就是高速交换。\n\n网络的分布层：将流量路由或引导至较小的节点集群或领域。类似于中等速度在城市或都会区中分流交通流量省道。\n\n网络的接入层：以较低速度将流量直接床输给最终用户或末端节点，类似于直接到达最终地址的地方道路。\n\n记住，速度是个相对概念，核心层、分布层、接入层是相对的。\n\n\n## 通信基础知识\n通信术语\n单工：一个仅能发送，另一个仅能接收数据。例如调频广播\n\n半双工：两台设备都能发送接收数据，但同一时间只有一个设备可以传输。例如无线对讲机\n\n双工：两台设备可以同时发送接收数据。例如电话\n\n载波信号：一种高频信号，用于承载有效信号进行发射。\n\n振幅：波的高度，力度或能量。\n\n波长：两个连续波的相似点之间的距离。一般是波峰与波峰之间。\n\n频率：波传播的速度。一秒内产生的波的数量。周期的倒数。\n\n周期：传播一个波长距离的时间。\n\n相位：同频波之间的位置\n\n操作信号以表示多个数据的方法称为键控法(keying method)。\n幅移键控(ASK)\n\n频移键控(FSK)\n\n相移键控(PSK)\n\n\n\n## 网站资源\nWi-Fi联盟：https://www.wi-fi.org\nCWNP网站： https://www.cwnp.com\nRevolution Wi-Fi: http://www.revolutionwifi.net\nWirednot: https://wirednot.wordpress.com\n商业与个人博客链接：https://gcatewifi.wordpress.com\nWLPC网站：https://www.wlanpros.com\n\n\n\n","source":"_posts/CWNA-标准、行业组织与通信基础知识概述.md","raw":"---\ntitle: 'CWNA:标准、行业组织与通信基础知识概述'\ndate: 2022-01-06 14:34:03\ntags:\n---\n1.无线局域网的发展历程\n2.标准组织\n  美国通信联邦委员会\n  国际电信联盟无线电通信部门\n  电气和电子工程师协会\n  互联网工程任务组\n  Wi-Fi联盟\n  国际标准化组织\n3.核心层、分布层与接入层\n4.通信基础知识\n  通信术语\n  载波信号\n  键控法\n\n## 无线局域网的发展历程\n19世纪，迈克尔·法拉第、詹姆斯·克拉克·麦克斯韦、海因里希·鲁道夫·赫兹、尼古拉·特斯拉、大卫、爱德华·休斯、\n托马斯·爱迪生、古列尔莫·马可尼等许多发明家与科学家开始进行无线通信方面的实验。\n1970年，第一种无线网络ALOHAnet在美国夏威夷大学诞生，这种网络以无线方式在夏威夷群岛之间传输数据。一般认\n为，ALOHAnet使用的技术奠定了802.3以太网CSMA/CD和802.11无线局域网CSMA/CA技术基础。\n20世纪90年代，低速无线网络产品开始商用，多数工作在900MHz频段。1991年，IEEE开始讨论无线局域网技术的标准\n化问题。1997年，IEEE批准通过802.11原始标准。\n1999年，IEEE批准通过数据速率较高的802.11b修正案。支持高达11Mbps的速率，无线局域网开始大规模商用。\n802.11技术营销术语称为Wi-Fi，被全球数十亿人公认为无线局域网络的代名词。\n\n## 标准组织\n   各种标准组织共同对无线网络行业进行监管和规范。\n监管机构：\n   国际电信联盟无线电通信部门(ITU-R)以及美国联邦通信委员会(FCC)等监管机构负责制定规则，以约束用户使用无线电的行为。这\n些机构管理通信频率，功率电平，传输方法，共同致力于规范日益壮大的无线用户。\n\n标准组织：\n   电气和电子工程师协会(IEEE)负责确保网络设备兼容与共存的标准。\n   互联网工程任务组(IETF)负责制定互联网标准。\n   Wi-Fi联盟(Wi-Fi Alliance)对无线网络设备进行认证测试，以确保他们符合无线局域网通信协议,实现设备兼容。\n   国际标准化组织(ISO)创建了开放系统互连模型。\n\n\n监管机构负责授权频谱和非授权频谱的管理。非授权频谱需要申请牌照。授权频谱和非授权频谱受6个方面的监管。\n   频率\n   带宽\n   有意辐射器的最大功率\n   最大等效全向辐射功率\n   使用（室内与室外）\n   频谱共享规则\n\n国际电信联盟无线电通信部门(ITU-R)承担全球频谱管理任务。致力于确保陆地、海洋与空中的通信活动不受干扰，通过\n5大行政区维护一个全球性的频率分配数据库。5大行政区：\n   行政区A:美洲\n   行政区B:西欧\n   行政区C:东欧与北亚\n   行政区D:非洲\n   行政区E:亚洲与澳大拉西亚\n\n除行政区外，还设3个由地理界定的无线电监管区:\n   监管区1:欧洲、中东与非洲\n   监管区2:美洲\n   监管区3:亚洲与大洋洲\n\n除了上述组织，各国设置自己的监管机构。\n\n\nOSI模型\n第七层        应用层\n第六层        表示层\n第五层        会话层\n第四层        传输层\n第三层        网络层\n第二层        数量链路层 : LLC子层和MAC子层\n第一层        物理层\n\n\n## 核心层、分布层与接入层\n网络的核心层：由高速主干网络构成，高速主干网相当于网络中的“高速公路”，其核心目标是在重要的数据中心和\n分布区域之间传输大量信息，如同高速公路连接城市与都会区一样。核心层既不负责流量路由，也不负责操作数据\n包，它的任务就是高速交换。\n\n网络的分布层：将流量路由或引导至较小的节点集群或领域。类似于中等速度在城市或都会区中分流交通流量省道。\n\n网络的接入层：以较低速度将流量直接床输给最终用户或末端节点，类似于直接到达最终地址的地方道路。\n\n记住，速度是个相对概念，核心层、分布层、接入层是相对的。\n\n\n## 通信基础知识\n通信术语\n单工：一个仅能发送，另一个仅能接收数据。例如调频广播\n\n半双工：两台设备都能发送接收数据，但同一时间只有一个设备可以传输。例如无线对讲机\n\n双工：两台设备可以同时发送接收数据。例如电话\n\n载波信号：一种高频信号，用于承载有效信号进行发射。\n\n振幅：波的高度，力度或能量。\n\n波长：两个连续波的相似点之间的距离。一般是波峰与波峰之间。\n\n频率：波传播的速度。一秒内产生的波的数量。周期的倒数。\n\n周期：传播一个波长距离的时间。\n\n相位：同频波之间的位置\n\n操作信号以表示多个数据的方法称为键控法(keying method)。\n幅移键控(ASK)\n\n频移键控(FSK)\n\n相移键控(PSK)\n\n\n\n## 网站资源\nWi-Fi联盟：https://www.wi-fi.org\nCWNP网站： https://www.cwnp.com\nRevolution Wi-Fi: http://www.revolutionwifi.net\nWirednot: https://wirednot.wordpress.com\n商业与个人博客链接：https://gcatewifi.wordpress.com\nWLPC网站：https://www.wlanpros.com\n\n\n\n","slug":"CWNA-标准、行业组织与通信基础知识概述","published":1,"updated":"2022-01-06T08:34:10.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2q73n40000a3fdcosh0lcm","content":"<p>1.无线局域网的发展历程<br>2.标准组织<br>  美国通信联邦委员会<br>  国际电信联盟无线电通信部门<br>  电气和电子工程师协会<br>  互联网工程任务组<br>  Wi-Fi联盟<br>  国际标准化组织<br>3.核心层、分布层与接入层<br>4.通信基础知识<br>  通信术语<br>  载波信号<br>  键控法</p>\n<h2 id=\"无线局域网的发展历程\"><a href=\"#无线局域网的发展历程\" class=\"headerlink\" title=\"无线局域网的发展历程\"></a>无线局域网的发展历程</h2><p>19世纪，迈克尔·法拉第、詹姆斯·克拉克·麦克斯韦、海因里希·鲁道夫·赫兹、尼古拉·特斯拉、大卫、爱德华·休斯、<br>托马斯·爱迪生、古列尔莫·马可尼等许多发明家与科学家开始进行无线通信方面的实验。<br>1970年，第一种无线网络ALOHAnet在美国夏威夷大学诞生，这种网络以无线方式在夏威夷群岛之间传输数据。一般认<br>为，ALOHAnet使用的技术奠定了802.3以太网CSMA/CD和802.11无线局域网CSMA/CA技术基础。<br>20世纪90年代，低速无线网络产品开始商用，多数工作在900MHz频段。1991年，IEEE开始讨论无线局域网技术的标准<br>化问题。1997年，IEEE批准通过802.11原始标准。<br>1999年，IEEE批准通过数据速率较高的802.11b修正案。支持高达11Mbps的速率，无线局域网开始大规模商用。<br>802.11技术营销术语称为Wi-Fi，被全球数十亿人公认为无线局域网络的代名词。</p>\n<h2 id=\"标准组织\"><a href=\"#标准组织\" class=\"headerlink\" title=\"标准组织\"></a>标准组织</h2><p>   各种标准组织共同对无线网络行业进行监管和规范。<br>监管机构：<br>   国际电信联盟无线电通信部门(ITU-R)以及美国联邦通信委员会(FCC)等监管机构负责制定规则，以约束用户使用无线电的行为。这<br>些机构管理通信频率，功率电平，传输方法，共同致力于规范日益壮大的无线用户。</p>\n<p>标准组织：<br>   电气和电子工程师协会(IEEE)负责确保网络设备兼容与共存的标准。<br>   互联网工程任务组(IETF)负责制定互联网标准。<br>   Wi-Fi联盟(Wi-Fi Alliance)对无线网络设备进行认证测试，以确保他们符合无线局域网通信协议,实现设备兼容。<br>   国际标准化组织(ISO)创建了开放系统互连模型。</p>\n<p>监管机构负责授权频谱和非授权频谱的管理。非授权频谱需要申请牌照。授权频谱和非授权频谱受6个方面的监管。<br>   频率<br>   带宽<br>   有意辐射器的最大功率<br>   最大等效全向辐射功率<br>   使用（室内与室外）<br>   频谱共享规则</p>\n<p>国际电信联盟无线电通信部门(ITU-R)承担全球频谱管理任务。致力于确保陆地、海洋与空中的通信活动不受干扰，通过<br>5大行政区维护一个全球性的频率分配数据库。5大行政区：<br>   行政区A:美洲<br>   行政区B:西欧<br>   行政区C:东欧与北亚<br>   行政区D:非洲<br>   行政区E:亚洲与澳大拉西亚</p>\n<p>除行政区外，还设3个由地理界定的无线电监管区:<br>   监管区1:欧洲、中东与非洲<br>   监管区2:美洲<br>   监管区3:亚洲与大洋洲</p>\n<p>除了上述组织，各国设置自己的监管机构。</p>\n<p>OSI模型<br>第七层        应用层<br>第六层        表示层<br>第五层        会话层<br>第四层        传输层<br>第三层        网络层<br>第二层        数量链路层 : LLC子层和MAC子层<br>第一层        物理层</p>\n<h2 id=\"核心层、分布层与接入层\"><a href=\"#核心层、分布层与接入层\" class=\"headerlink\" title=\"核心层、分布层与接入层\"></a>核心层、分布层与接入层</h2><p>网络的核心层：由高速主干网络构成，高速主干网相当于网络中的“高速公路”，其核心目标是在重要的数据中心和<br>分布区域之间传输大量信息，如同高速公路连接城市与都会区一样。核心层既不负责流量路由，也不负责操作数据<br>包，它的任务就是高速交换。</p>\n<p>网络的分布层：将流量路由或引导至较小的节点集群或领域。类似于中等速度在城市或都会区中分流交通流量省道。</p>\n<p>网络的接入层：以较低速度将流量直接床输给最终用户或末端节点，类似于直接到达最终地址的地方道路。</p>\n<p>记住，速度是个相对概念，核心层、分布层、接入层是相对的。</p>\n<h2 id=\"通信基础知识\"><a href=\"#通信基础知识\" class=\"headerlink\" title=\"通信基础知识\"></a>通信基础知识</h2><p>通信术语<br>单工：一个仅能发送，另一个仅能接收数据。例如调频广播</p>\n<p>半双工：两台设备都能发送接收数据，但同一时间只有一个设备可以传输。例如无线对讲机</p>\n<p>双工：两台设备可以同时发送接收数据。例如电话</p>\n<p>载波信号：一种高频信号，用于承载有效信号进行发射。</p>\n<p>振幅：波的高度，力度或能量。</p>\n<p>波长：两个连续波的相似点之间的距离。一般是波峰与波峰之间。</p>\n<p>频率：波传播的速度。一秒内产生的波的数量。周期的倒数。</p>\n<p>周期：传播一个波长距离的时间。</p>\n<p>相位：同频波之间的位置</p>\n<p>操作信号以表示多个数据的方法称为键控法(keying method)。<br>幅移键控(ASK)</p>\n<p>频移键控(FSK)</p>\n<p>相移键控(PSK)</p>\n<h2 id=\"网站资源\"><a href=\"#网站资源\" class=\"headerlink\" title=\"网站资源\"></a>网站资源</h2><p>Wi-Fi联盟：<a href=\"https://www.wi-fi.org/\">https://www.wi-fi.org</a><br>CWNP网站： <a href=\"https://www.cwnp.com/\">https://www.cwnp.com</a><br>Revolution Wi-Fi: <a href=\"http://www.revolutionwifi.net/\">http://www.revolutionwifi.net</a><br>Wirednot: <a href=\"https://wirednot.wordpress.com/\">https://wirednot.wordpress.com</a><br>商业与个人博客链接：<a href=\"https://gcatewifi.wordpress.com/\">https://gcatewifi.wordpress.com</a><br>WLPC网站：<a href=\"https://www.wlanpros.com/\">https://www.wlanpros.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.无线局域网的发展历程<br>2.标准组织<br>  美国通信联邦委员会<br>  国际电信联盟无线电通信部门<br>  电气和电子工程师协会<br>  互联网工程任务组<br>  Wi-Fi联盟<br>  国际标准化组织<br>3.核心层、分布层与接入层<br>4.通信基础知识<br>  通信术语<br>  载波信号<br>  键控法</p>\n<h2 id=\"无线局域网的发展历程\"><a href=\"#无线局域网的发展历程\" class=\"headerlink\" title=\"无线局域网的发展历程\"></a>无线局域网的发展历程</h2><p>19世纪，迈克尔·法拉第、詹姆斯·克拉克·麦克斯韦、海因里希·鲁道夫·赫兹、尼古拉·特斯拉、大卫、爱德华·休斯、<br>托马斯·爱迪生、古列尔莫·马可尼等许多发明家与科学家开始进行无线通信方面的实验。<br>1970年，第一种无线网络ALOHAnet在美国夏威夷大学诞生，这种网络以无线方式在夏威夷群岛之间传输数据。一般认<br>为，ALOHAnet使用的技术奠定了802.3以太网CSMA/CD和802.11无线局域网CSMA/CA技术基础。<br>20世纪90年代，低速无线网络产品开始商用，多数工作在900MHz频段。1991年，IEEE开始讨论无线局域网技术的标准<br>化问题。1997年，IEEE批准通过802.11原始标准。<br>1999年，IEEE批准通过数据速率较高的802.11b修正案。支持高达11Mbps的速率，无线局域网开始大规模商用。<br>802.11技术营销术语称为Wi-Fi，被全球数十亿人公认为无线局域网络的代名词。</p>\n<h2 id=\"标准组织\"><a href=\"#标准组织\" class=\"headerlink\" title=\"标准组织\"></a>标准组织</h2><p>   各种标准组织共同对无线网络行业进行监管和规范。<br>监管机构：<br>   国际电信联盟无线电通信部门(ITU-R)以及美国联邦通信委员会(FCC)等监管机构负责制定规则，以约束用户使用无线电的行为。这<br>些机构管理通信频率，功率电平，传输方法，共同致力于规范日益壮大的无线用户。</p>\n<p>标准组织：<br>   电气和电子工程师协会(IEEE)负责确保网络设备兼容与共存的标准。<br>   互联网工程任务组(IETF)负责制定互联网标准。<br>   Wi-Fi联盟(Wi-Fi Alliance)对无线网络设备进行认证测试，以确保他们符合无线局域网通信协议,实现设备兼容。<br>   国际标准化组织(ISO)创建了开放系统互连模型。</p>\n<p>监管机构负责授权频谱和非授权频谱的管理。非授权频谱需要申请牌照。授权频谱和非授权频谱受6个方面的监管。<br>   频率<br>   带宽<br>   有意辐射器的最大功率<br>   最大等效全向辐射功率<br>   使用（室内与室外）<br>   频谱共享规则</p>\n<p>国际电信联盟无线电通信部门(ITU-R)承担全球频谱管理任务。致力于确保陆地、海洋与空中的通信活动不受干扰，通过<br>5大行政区维护一个全球性的频率分配数据库。5大行政区：<br>   行政区A:美洲<br>   行政区B:西欧<br>   行政区C:东欧与北亚<br>   行政区D:非洲<br>   行政区E:亚洲与澳大拉西亚</p>\n<p>除行政区外，还设3个由地理界定的无线电监管区:<br>   监管区1:欧洲、中东与非洲<br>   监管区2:美洲<br>   监管区3:亚洲与大洋洲</p>\n<p>除了上述组织，各国设置自己的监管机构。</p>\n<p>OSI模型<br>第七层        应用层<br>第六层        表示层<br>第五层        会话层<br>第四层        传输层<br>第三层        网络层<br>第二层        数量链路层 : LLC子层和MAC子层<br>第一层        物理层</p>\n<h2 id=\"核心层、分布层与接入层\"><a href=\"#核心层、分布层与接入层\" class=\"headerlink\" title=\"核心层、分布层与接入层\"></a>核心层、分布层与接入层</h2><p>网络的核心层：由高速主干网络构成，高速主干网相当于网络中的“高速公路”，其核心目标是在重要的数据中心和<br>分布区域之间传输大量信息，如同高速公路连接城市与都会区一样。核心层既不负责流量路由，也不负责操作数据<br>包，它的任务就是高速交换。</p>\n<p>网络的分布层：将流量路由或引导至较小的节点集群或领域。类似于中等速度在城市或都会区中分流交通流量省道。</p>\n<p>网络的接入层：以较低速度将流量直接床输给最终用户或末端节点，类似于直接到达最终地址的地方道路。</p>\n<p>记住，速度是个相对概念，核心层、分布层、接入层是相对的。</p>\n<h2 id=\"通信基础知识\"><a href=\"#通信基础知识\" class=\"headerlink\" title=\"通信基础知识\"></a>通信基础知识</h2><p>通信术语<br>单工：一个仅能发送，另一个仅能接收数据。例如调频广播</p>\n<p>半双工：两台设备都能发送接收数据，但同一时间只有一个设备可以传输。例如无线对讲机</p>\n<p>双工：两台设备可以同时发送接收数据。例如电话</p>\n<p>载波信号：一种高频信号，用于承载有效信号进行发射。</p>\n<p>振幅：波的高度，力度或能量。</p>\n<p>波长：两个连续波的相似点之间的距离。一般是波峰与波峰之间。</p>\n<p>频率：波传播的速度。一秒内产生的波的数量。周期的倒数。</p>\n<p>周期：传播一个波长距离的时间。</p>\n<p>相位：同频波之间的位置</p>\n<p>操作信号以表示多个数据的方法称为键控法(keying method)。<br>幅移键控(ASK)</p>\n<p>频移键控(FSK)</p>\n<p>相移键控(PSK)</p>\n<h2 id=\"网站资源\"><a href=\"#网站资源\" class=\"headerlink\" title=\"网站资源\"></a>网站资源</h2><p>Wi-Fi联盟：<a href=\"https://www.wi-fi.org/\">https://www.wi-fi.org</a><br>CWNP网站： <a href=\"https://www.cwnp.com/\">https://www.cwnp.com</a><br>Revolution Wi-Fi: <a href=\"http://www.revolutionwifi.net/\">http://www.revolutionwifi.net</a><br>Wirednot: <a href=\"https://wirednot.wordpress.com/\">https://wirednot.wordpress.com</a><br>商业与个人博客链接：<a href=\"https://gcatewifi.wordpress.com/\">https://gcatewifi.wordpress.com</a><br>WLPC网站：<a href=\"https://www.wlanpros.com/\">https://www.wlanpros.com</a></p>\n"},{"title":"Step by step to build personal blog.","date":"2021-12-08T15:48:18.000Z","_content":"## OS:ubuntu\n1.https://nodejs.org/en/ 下载nodejs\n2.解压下载的nodejs\n``` bash\n$ tar -xvf node-v16.13.1-linux-x64.tar.xz\n```\n3.配置nodejs\n``` bash\n$ cp node-v16.13.1-linux-x64 ~/nodejs\n$ sudo ln -s ~/nodejs/bin/npm /usr/bin/\n$ sudo ln -s ~/nodejs/bin/npm /usr/bin/\n```\n4.安装cnpm\n``` bash\n$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n$ sudo ln -s ~/nodejs/bin/cnpm /usr/bin/\n```\n\n5.安装hexo\n``` bash\n$ cnpm install -g hexo-cli\n$ sudo ln -s ~/nodejs/bin/hexo /usr/bin/\n```\n\n6.创建目录\n``` bash\n$ mkdir blog\n$ cd blog\n```\n\n7.生成博客\n``` bash\n$ hexo init\n```\n\n8.启动博客\n``` bash\n$ hexo s\n```\n\n9.浏览器打开本地预览\n> http://localhost:4000\n\n10.清理\n``` bash\n$ hexo clean\n```\n\n11.生成博客\n``` bash\n$ hexo g\n$ hexo s\n```\n\n12.浏览器打开\n> http://localhost:4000 \n\n13.安装部署工具\n``` bash\n$ cnpm install --save hexo-deployer-git\n```\n\n14.修改配置用于部署\n> 在__config.yml最后添加：\n    deploy:\n    type: git\n    repo: https://github.com/nld2019/nld2019.github.io.git\n    branch: master\n\n15.部署博客\n``` bash\n$ hexo d\n```\n\n16.根据仓库名称访问博客\n> https://nld2019.github.io/\n","source":"_posts/Step-by-step-to-build-personal-blog.md","raw":"---\ntitle: Step by step to build personal blog.\ndate: 2021-12-08 23:48:18\ntags:\n---\n## OS:ubuntu\n1.https://nodejs.org/en/ 下载nodejs\n2.解压下载的nodejs\n``` bash\n$ tar -xvf node-v16.13.1-linux-x64.tar.xz\n```\n3.配置nodejs\n``` bash\n$ cp node-v16.13.1-linux-x64 ~/nodejs\n$ sudo ln -s ~/nodejs/bin/npm /usr/bin/\n$ sudo ln -s ~/nodejs/bin/npm /usr/bin/\n```\n4.安装cnpm\n``` bash\n$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n$ sudo ln -s ~/nodejs/bin/cnpm /usr/bin/\n```\n\n5.安装hexo\n``` bash\n$ cnpm install -g hexo-cli\n$ sudo ln -s ~/nodejs/bin/hexo /usr/bin/\n```\n\n6.创建目录\n``` bash\n$ mkdir blog\n$ cd blog\n```\n\n7.生成博客\n``` bash\n$ hexo init\n```\n\n8.启动博客\n``` bash\n$ hexo s\n```\n\n9.浏览器打开本地预览\n> http://localhost:4000\n\n10.清理\n``` bash\n$ hexo clean\n```\n\n11.生成博客\n``` bash\n$ hexo g\n$ hexo s\n```\n\n12.浏览器打开\n> http://localhost:4000 \n\n13.安装部署工具\n``` bash\n$ cnpm install --save hexo-deployer-git\n```\n\n14.修改配置用于部署\n> 在__config.yml最后添加：\n    deploy:\n    type: git\n    repo: https://github.com/nld2019/nld2019.github.io.git\n    branch: master\n\n15.部署博客\n``` bash\n$ hexo d\n```\n\n16.根据仓库名称访问博客\n> https://nld2019.github.io/\n","slug":"Step-by-step-to-build-personal-blog","published":1,"updated":"2021-12-11T14:58:26.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2q73n80001a3fd7ztr0bjp","content":"<h2 id=\"OS-ubuntu\"><a href=\"#OS-ubuntu\" class=\"headerlink\" title=\"OS:ubuntu\"></a>OS:ubuntu</h2><p>1.<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a> 下载nodejs<br>2.解压下载的nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -xvf node-v16.13.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>3.配置nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp node-v16.13.1-linux-x64 ~/nodejs</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/npm /usr/bin/</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/npm /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>4.安装cnpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/cnpm /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>5.安装hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/hexo /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>6.创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<p>7.生成博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<p>8.启动博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n\n<p>9.浏览器打开本地预览</p>\n<blockquote>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n</blockquote>\n<p>10.清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>11.生成博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n\n<p>12.浏览器打开</p>\n<blockquote>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a> </p>\n</blockquote>\n<p>13.安装部署工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>14.修改配置用于部署</p>\n<blockquote>\n<p>在__config.yml最后添加：<br>    deploy:<br>    type: git<br>    repo: <a href=\"https://github.com/nld2019/nld2019.github.io.git\">https://github.com/nld2019/nld2019.github.io.git</a><br>    branch: master</p>\n</blockquote>\n<p>15.部署博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>16.根据仓库名称访问博客</p>\n<blockquote>\n<p><a href=\"https://nld2019.github.io/\">https://nld2019.github.io/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"OS-ubuntu\"><a href=\"#OS-ubuntu\" class=\"headerlink\" title=\"OS:ubuntu\"></a>OS:ubuntu</h2><p>1.<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a> 下载nodejs<br>2.解压下载的nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -xvf node-v16.13.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<p>3.配置nodejs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp node-v16.13.1-linux-x64 ~/nodejs</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/npm /usr/bin/</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/npm /usr/bin/</span><br></pre></td></tr></table></figure>\n<p>4.安装cnpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/cnpm /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>5.安装hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli</span><br><span class=\"line\">$ sudo ln -s ~/nodejs/bin/hexo /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>6.创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<p>7.生成博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<p>8.启动博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n\n<p>9.浏览器打开本地预览</p>\n<blockquote>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a></p>\n</blockquote>\n<p>10.清理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>11.生成博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n\n<p>12.浏览器打开</p>\n<blockquote>\n<p><a href=\"http://localhost:4000/\">http://localhost:4000</a> </p>\n</blockquote>\n<p>13.安装部署工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>14.修改配置用于部署</p>\n<blockquote>\n<p>在__config.yml最后添加：<br>    deploy:<br>    type: git<br>    repo: <a href=\"https://github.com/nld2019/nld2019.github.io.git\">https://github.com/nld2019/nld2019.github.io.git</a><br>    branch: master</p>\n</blockquote>\n<p>15.部署博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>16.根据仓库名称访问博客</p>\n<blockquote>\n<p><a href=\"https://nld2019.github.io/\">https://nld2019.github.io/</a></p>\n</blockquote>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-11T14:58:26.373Z","updated":"2021-12-11T14:58:26.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2q73n90002a3fddlj1dx2u","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"SVN服务仓库搭建记录","date":"2021-12-16T15:41:15.000Z","_content":"## 目标\n在ubuntu上搭建SVN仓库，通过windows访问仓库以记录和管理文档。\n\n## 步骤\n1.检查ubuntu是否已经安装SVN工具\n``` bash\n$ svn --version\n```\n2.如果没有SVN则安装SVN工具\n``` bash\n$ sudo apt install subversion\n```\n3.再次检查SVN\n``` bash\n$ svn --version\nsvn, version 1.9.7 (r1800392)\n   compiled Mar 28 2018, 08:49:13 on x86_64-pc-linux-gnu\n   ......\n```\n4.创建SVN仓库测试目录\n``` bash\n$ mkdir test\n$ cd test/\n$ mkdir svn\n$ cd svn/\n```\n5.创建第一个SVN仓库，取名为repo1\n``` bash\n$ svnadmin create ~/work/test/svn/repo1\n$ ls\nrepo1\n$ cd repo1/\n$ ls\nconf  db  format  hooks  locks  README.txt\n```\n\n6.进入仓库配置目录\n``` bash\n$ cd conf/\n$ ls\nauthz  hooks-env.tmpl  passwd  svnserve.conf\n```\n\n7.配置仓库\n> $ 修改文件svnserve.conf以设置以下选项 \n  anon-access = none\n  auth-access = write\n  password-db = passwd\n  authz-db = authz\n  realm = My First Repository\n\n8.修改文件passwod,以配置访问密码\n> //配置用户名为admin,等号右边为admin密码\n  [users]\n  admin = admin\n\n9.修改文件authz,以配置访问权限和路径\n> [groups]\n  g_admin = admin\n>  \n  [/]\n  @g_admin = rw\n> \\* = r\n\n10.启动SVN服务,即可通过 svn://192.168.0.110/repo1使用仓库\n``` bash\n$ pwd\n~/work/test/svn\n$ ifconfig获取IP地址为: 192.168.0.110\n```\n\n11.在windows上安装TortoiseSVN\n12.通过安装的TortoiseSVN工具访问SVN仓库\n> 首次使用示例\n  1)创建test文件夹\n  2)鼠标右键->TortoiseSVN->Repo-broswer\n  3)输入仓库地址 svn://192.168.0.110/repo1\n  4)输入账号登陆即可浏览仓库\n  5)也可以鼠标右键->SVN checkout...到本地文件夹\n  6)更新仓库到最新，修改文件，提交文件到远程仓库\n\n\n## 后记\n今天状态不好，错误的修改了文档，发现不好恢复到原始模样，所以记录一下SVN版本控制工具。\n","source":"_posts/SVN服务仓库搭建记录.md","raw":"---\ntitle: SVN服务仓库搭建记录\ndate: 2021-12-16 23:41:15\ntags:\n---\n## 目标\n在ubuntu上搭建SVN仓库，通过windows访问仓库以记录和管理文档。\n\n## 步骤\n1.检查ubuntu是否已经安装SVN工具\n``` bash\n$ svn --version\n```\n2.如果没有SVN则安装SVN工具\n``` bash\n$ sudo apt install subversion\n```\n3.再次检查SVN\n``` bash\n$ svn --version\nsvn, version 1.9.7 (r1800392)\n   compiled Mar 28 2018, 08:49:13 on x86_64-pc-linux-gnu\n   ......\n```\n4.创建SVN仓库测试目录\n``` bash\n$ mkdir test\n$ cd test/\n$ mkdir svn\n$ cd svn/\n```\n5.创建第一个SVN仓库，取名为repo1\n``` bash\n$ svnadmin create ~/work/test/svn/repo1\n$ ls\nrepo1\n$ cd repo1/\n$ ls\nconf  db  format  hooks  locks  README.txt\n```\n\n6.进入仓库配置目录\n``` bash\n$ cd conf/\n$ ls\nauthz  hooks-env.tmpl  passwd  svnserve.conf\n```\n\n7.配置仓库\n> $ 修改文件svnserve.conf以设置以下选项 \n  anon-access = none\n  auth-access = write\n  password-db = passwd\n  authz-db = authz\n  realm = My First Repository\n\n8.修改文件passwod,以配置访问密码\n> //配置用户名为admin,等号右边为admin密码\n  [users]\n  admin = admin\n\n9.修改文件authz,以配置访问权限和路径\n> [groups]\n  g_admin = admin\n>  \n  [/]\n  @g_admin = rw\n> \\* = r\n\n10.启动SVN服务,即可通过 svn://192.168.0.110/repo1使用仓库\n``` bash\n$ pwd\n~/work/test/svn\n$ ifconfig获取IP地址为: 192.168.0.110\n```\n\n11.在windows上安装TortoiseSVN\n12.通过安装的TortoiseSVN工具访问SVN仓库\n> 首次使用示例\n  1)创建test文件夹\n  2)鼠标右键->TortoiseSVN->Repo-broswer\n  3)输入仓库地址 svn://192.168.0.110/repo1\n  4)输入账号登陆即可浏览仓库\n  5)也可以鼠标右键->SVN checkout...到本地文件夹\n  6)更新仓库到最新，修改文件，提交文件到远程仓库\n\n\n## 后记\n今天状态不好，错误的修改了文档，发现不好恢复到原始模样，所以记录一下SVN版本控制工具。\n","slug":"SVN服务仓库搭建记录","published":1,"updated":"2021-12-17T07:16:12.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2q73nb0003a3fd9vud97xg","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>在ubuntu上搭建SVN仓库，通过windows访问仓库以记录和管理文档。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.检查ubuntu是否已经安装SVN工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn --version</span><br></pre></td></tr></table></figure>\n<p>2.如果没有SVN则安装SVN工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install subversion</span><br></pre></td></tr></table></figure>\n<p>3.再次检查SVN</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn --version</span><br><span class=\"line\">svn, version 1.9.7 (r1800392)</span><br><span class=\"line\">   compiled Mar 28 2018, 08:49:13 on x86_64-pc-linux-gnu</span><br><span class=\"line\">   ......</span><br></pre></td></tr></table></figure>\n<p>4.创建SVN仓库测试目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir <span class=\"built_in\">test</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span>/</span><br><span class=\"line\">$ mkdir svn</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> svn/</span><br></pre></td></tr></table></figure>\n<p>5.创建第一个SVN仓库，取名为repo1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svnadmin create ~/work/<span class=\"built_in\">test</span>/svn/repo1</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">repo1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> repo1/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">conf  db  format  hooks  locks  README.txt</span><br></pre></td></tr></table></figure>\n\n<p>6.进入仓库配置目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> conf/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">authz  hooks-env.tmpl  passwd  svnserve.conf</span><br></pre></td></tr></table></figure>\n\n<p>7.配置仓库</p>\n<blockquote>\n<p>$ 修改文件svnserve.conf以设置以下选项<br>  anon-access = none<br>  auth-access = write<br>  password-db = passwd<br>  authz-db = authz<br>  realm = My First Repository</p>\n</blockquote>\n<p>8.修改文件passwod,以配置访问密码</p>\n<blockquote>\n<p>//配置用户名为admin,等号右边为admin密码<br>  [users]<br>  admin = admin</p>\n</blockquote>\n<p>9.修改文件authz,以配置访问权限和路径</p>\n<blockquote>\n<p>[groups]<br>  g_admin = admin</p>\n<p>  [/]<br>  @g_admin = rw<br>* = r</p>\n</blockquote>\n<p>10.启动SVN服务,即可通过 svn://192.168.0.110/repo1使用仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">~/work/<span class=\"built_in\">test</span>/svn</span><br><span class=\"line\">$ ifconfig获取IP地址为: 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<p>11.在windows上安装TortoiseSVN<br>12.通过安装的TortoiseSVN工具访问SVN仓库</p>\n<blockquote>\n<p>首次使用示例<br>  1)创建test文件夹<br>  2)鼠标右键-&gt;TortoiseSVN-&gt;Repo-broswer<br>  3)输入仓库地址 svn://192.168.0.110/repo1<br>  4)输入账号登陆即可浏览仓库<br>  5)也可以鼠标右键-&gt;SVN checkout…到本地文件夹<br>  6)更新仓库到最新，修改文件，提交文件到远程仓库</p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>今天状态不好，错误的修改了文档，发现不好恢复到原始模样，所以记录一下SVN版本控制工具。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>在ubuntu上搭建SVN仓库，通过windows访问仓库以记录和管理文档。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.检查ubuntu是否已经安装SVN工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn --version</span><br></pre></td></tr></table></figure>\n<p>2.如果没有SVN则安装SVN工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install subversion</span><br></pre></td></tr></table></figure>\n<p>3.再次检查SVN</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svn --version</span><br><span class=\"line\">svn, version 1.9.7 (r1800392)</span><br><span class=\"line\">   compiled Mar 28 2018, 08:49:13 on x86_64-pc-linux-gnu</span><br><span class=\"line\">   ......</span><br></pre></td></tr></table></figure>\n<p>4.创建SVN仓库测试目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir <span class=\"built_in\">test</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> <span class=\"built_in\">test</span>/</span><br><span class=\"line\">$ mkdir svn</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> svn/</span><br></pre></td></tr></table></figure>\n<p>5.创建第一个SVN仓库，取名为repo1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ svnadmin create ~/work/<span class=\"built_in\">test</span>/svn/repo1</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">repo1</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> repo1/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">conf  db  format  hooks  locks  README.txt</span><br></pre></td></tr></table></figure>\n\n<p>6.进入仓库配置目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> conf/</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">authz  hooks-env.tmpl  passwd  svnserve.conf</span><br></pre></td></tr></table></figure>\n\n<p>7.配置仓库</p>\n<blockquote>\n<p>$ 修改文件svnserve.conf以设置以下选项<br>  anon-access = none<br>  auth-access = write<br>  password-db = passwd<br>  authz-db = authz<br>  realm = My First Repository</p>\n</blockquote>\n<p>8.修改文件passwod,以配置访问密码</p>\n<blockquote>\n<p>//配置用户名为admin,等号右边为admin密码<br>  [users]<br>  admin = admin</p>\n</blockquote>\n<p>9.修改文件authz,以配置访问权限和路径</p>\n<blockquote>\n<p>[groups]<br>  g_admin = admin</p>\n<p>  [/]<br>  @g_admin = rw<br>* = r</p>\n</blockquote>\n<p>10.启动SVN服务,即可通过 svn://192.168.0.110/repo1使用仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">~/work/<span class=\"built_in\">test</span>/svn</span><br><span class=\"line\">$ ifconfig获取IP地址为: 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<p>11.在windows上安装TortoiseSVN<br>12.通过安装的TortoiseSVN工具访问SVN仓库</p>\n<blockquote>\n<p>首次使用示例<br>  1)创建test文件夹<br>  2)鼠标右键-&gt;TortoiseSVN-&gt;Repo-broswer<br>  3)输入仓库地址 svn://192.168.0.110/repo1<br>  4)输入账号登陆即可浏览仓库<br>  5)也可以鼠标右键-&gt;SVN checkout…到本地文件夹<br>  6)更新仓库到最新，修改文件，提交文件到远程仓库</p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>今天状态不好，错误的修改了文档，发现不好恢复到原始模样，所以记录一下SVN版本控制工具。</p>\n"},{"title":"vim+cscope+ctags阅读源码","date":"2021-12-22T06:20:21.000Z","_content":"使用vim + cscope/ctags，就能够实现Source Insight的功能，可以很方便地查看分析源代码。\n\n关键词: vim, cscope, ctags, tags\n\n\n1.查看vim是否支持cscope\n> $ vim --version | grep cscope\n\n2.查看帮助\n> $ man cscope\n  $ man ctags\n  :help cscope (vim command)\n\n3.使用cscope[2]\n    当前目录有main.c，其中调用了cstest.c中的print()，此函数在cstest.h中进行了声明。\n    使用下面的命令生成代码的符号索引文件：\n    $ cscope -Rbkq\n    这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。\n\n    其中cscope.out是基本的符号索引，后两个文件是使用\"-q\"选项生成的，可以加快cscope的索引速度。上面命令的参数含义如下：\n    -R: 在生成索引文件时，搜索子目录树中的代码\n    -b: 只生成索引文件，不进入cscope的界面\n    -k: 在生成索引文件时，不搜索/usr/include目录\n    -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度\n    -i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用\"-\"，表示由标准输入获得文件列表。\n    -I dir: 在-I选项指出的目录中查找头文件\n    -u: 扫描所有文件，重新生成交叉索引文件\n    -C: 在搜索时忽略大小写\n    -P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。\n\n    在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，一般不用这个界面，所以使用了\"-b\"选项。如果已经进入了这个界面，按CTRL-D退出。\n\n\t查看阅读c++代码[3]\n    cscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。\n\t如果希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。\n\t当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。\n    下面的命令会查找当前目录及子目录中所有后缀名为\".h\", \".c\", \"cc\"和\".cpp\"的文件，并把查找结果重定向到文件cscope.files中。\n\t然后cscope根据cscope.files中的所有文件，生成符号索引文件。最后一条命令使用ctags命令，\n\t生成一个tags文件，在vim中执行\":help tags\"命令查询它的用法。它可以和cscope一起使用。\n\n    $ find . -name \"*.h\" -o -name \"*.c\" -o -name \"*.cc\" -o \"*.cpp\" > cscope.files\n    $ cscope -bkq -i cscope.files\n    $ ctags -R\n\n    接下来可以在vim里浏览代码了\n    $ vim main.c\n    在vim里命令状态下添加符号索引库\n    : cscope add cscope.out\n    然后可以查看相应的函数定义或文件，ctrl+t返回。\n    : cscope find g print\n    : cscope find f cstest.h\n\n    #注意# 所生成的cscope.out和tags文件要在打开VIM所在的文件夹，否则VIM无法找到相关符号信息。\n\n\n4.创建相应的快捷键\n    将以下内容添加到~/.vimrc中，vim会自动加载当前目录下的符号索引cscope.out，可以使用ctrl+t、ctrl+]等。\n\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    function UpdateCtags()\n         let curdir=getcwd()\n         while !filereadable(\"./tags\")\n             cd ..\n             if getcwd() == \"/\"\n                 break\n             endif\n         endwhile\n         if filewritable(\"./tags\")\n             :!ctags -R\n         endif\n         execute \":cd \" . curdir\n     endfunction\n    \n     function UpdateCStags()\n         let curdir=getcwd()\n         while !filereadable(\"./cscope.out\")\n             cd ..\n             if getcwd() == \"/\"\n                 break\n             endif\n         endwhile\n         if filewritable(\"./cscope.out\")\n             :!cscope -Rbq\n             execute \":cscope kill 0\"\n             execute \":cscope add cscope.out\"\n         endif\n         execute \":cd \" . curdir\n     endfunction\n    \n     nmap <F8> :call UpdateCtags()<CR>\n     nmap <F9> :call UpdateCStags()<CR>\n    \n     \" 这样就可以在更新源代码文件后，随时使用<F8>及<F9>更新tags及cscope.out文件，\n     \" 不必关闭编辑文件，执行ctags -R/cscope -Rbq及重新打开文件。\n    \n     if has(\"cscope\")\n     set cscopetag   \" 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去\n     \" check cscope for definition of a symbol before checking ctags:\n     \" set to 1 if you want the reverse search order.\n     set csto=1\n    \n     \" add any cscope database in current directory\n     if filereadable(\"cscope.out\")\n     cs add cscope.out\n     \" else add the database pointed to by environment variable\n     elseif $CSCOPE_DB !=\"\"\n     cs add $CSCOPE_DB\n     endif\n    \n     \" show msg when any other cscope db added\n     set cscopeverbose\n    \n     nmap <C-\\>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>g :cs find g <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>c :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>t :cs find t <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>e :cs find e <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>f :cs find f <C-R>=expand(\"<cfile>\")<CR><CR>\n     nmap <C-\\>i :cs find i <C-R>=expand(\"<cfile>\")<CR><CR>\n     nmap <C-\\>d :cs find d <C-R>=expand(\"<cword>\")<CR><CR>\n     endif\n    \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\t其中<C-/>g是先同时按ctrl+\\键，之后再按一个g。功能就是查看当前光标所在符号的定义。\n\n5.vim阅读代码\n    添加cscope符号索引数据库后，可以调用\"cscope find\"命令进行查找，vim支持8种cscope的查询功能。\n\t如在代码中查找调用work()函数的函数，可以在vim命令状态下输入\":cs find c work\"，回车即可。还可以进行字符串查找，\n\t它会对双引号或单引号括起来的内容查找。还可以输入一个正则表达式，这类似于egrep程序的功能。\n    :cs help (vim command下查询)\n\n    s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方\n    g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能\n    d: 查找本函数调用的函数\n    c: 查找调用本函数的函数\n    t: 查找指定的字符串\n    e: 查找egrep模式，相当于egrep功能，但查找速度快多了\n    f: 查找并打开文件，类似vim的find功能\n    i: 查找包含本文件的文件\n\n\n6.在vim中使用tags查找符号\n    查看ctags帮助\n    $ man ctags\n    :help ctags  (vim command)\n    :help tags   (vim command)\n\n    在源代码根目录下执行 ctags -R 命令用来为程序源代码生成标签文件，其-R选项表示递归操作，同时为子目录也生成标签文件。\n\tvim利用生成的标签文件，可以进行相应检索、并在不同的文件C语言元素之间来回切换。\n    $ ctags -R\n\n    A) vim中使用\":tag xxx\"跳到函数或数据结构xxx处。使用tag命令时，可以使用TAB键进行匹配查找，继续按TAB键向下切换。\n    某个函数有多个定义时\n\n    D) 运行vim的时候，必须在\"tags\"文件所在的目录下运行。否则，运行vim的时候还要用\":set tags=xxx\"命令设定\"tags\"文件的路径，\n\t这样vim才能找到\"tags\"文件（这儿我们已经设置过了\"set tags=tags;\"，在子目录中也可以使用）。\n\n    E) 在函数中移动光标的快捷键:\n    gd 转到当前光标所指的局部变量的定义\n    * 转到当前光标所指的单词下一次出现的地方\n    # 转到当前光标所指的单词上一次出现的地方\n\n\t:ta tagname 跳转到标签tagname定义的地方\n\t:stag tagname 在分割窗口中查看包含tagname的文件\n\t:tags 查看到达当前位置所经过的标签路径\n\t:ts tagname   :tselect\t列出匹配tagname的标签，如为空，则使用标签栈中最后的标签\n\t如果想跳到包含block的标识符\":tag /block\" 然后用TAB键来选择。这里'/'就是告诉vim 'block'是一个语句块标签。\n\n\t:tf 跳转至第一个匹配的标签\n\t:tlast   :tl 跳转至最后一个匹配的标签\n\t:tnext\t\t\t:tn  跳转到下一个匹配的标签\n\t:[count]tnext\n    :[count]tprevious   :[count] tp     跳到前count个\n\n\t跳转快捷键：\n\tctrl-] ：跳转至光标所在对象定义之处\n\tctrl-t：返回跳转前位置\n\n\n7.taglist插件使用[4]\n    该插件可以像Source Insight那样将当前文件中的宏、全局变量、函数等tag显示在Symbol窗口，用鼠标点上述tag，就跳到该tag定义的位置；\n\t可以按字母序、该tag所属的类或scope，以及该tag在文件中出现的位置进行排序；\n\t如果切换到另外一个文件，Symbol窗口更新显示这个文件中的tag。taglist依赖于ctags。\n\n    要使用taglist插件，必须满足：\n    1).打开VIM的文件类型自动检测功能；\n    2).系统中装了Exuberant ctags工具，并且taglist能够找到此工具（因为taglist需要调用它来生成tag文件）；\n    3).你的VIM支持system()调用；\n\n    安装taglist插件\n    # emerge -av app-vim/taglist\n\n    查看帮助\n    :help helptags\n    :help taglist\n    :help taglist-intro\n\n    打开tag窗口\n    :TlistToggle\n\n    .vimrc中配置如下\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    \" ctags setting\n    set tags=./tags,./../tags,./*/tags;\n    \n    \" Tag list (ctags)\n    \n    filetype on                            \"文件类型自动检测\n    \n    if MySys() == \"windows\"                \"设定windows系统中ctags程序的位置\n       let Tlist_Ctags_Cmd = 'ctags'\n    elseif MySys() == \"linux\"              \"设定linux系统中ctags程序的位置\n       let Tlist_Ctags_Cmd = '/usr/bin/ctags'\n    endif\n    \n    let Tlist_Show_One_File = 1            \"不同时显示多个文件的tag，只显示当前文件的\n    let Tlist_Exit_OnlyWindow = 1          \"如果taglist窗口是最后一个窗口，则退出vim\n    let Tlist_Use_Right_Window = 1         \"在右侧窗口中显示taglist窗口\n    \n    map <silent> <F8> :TlistToggle<cr>     \"在映射F8键打开tags窗口\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n","source":"_posts/vim-cscope-ctags阅读源码.md","raw":"---\ntitle: vim+cscope+ctags阅读源码\ndate: 2021-12-22 14:20:21\ntags:\n---\n使用vim + cscope/ctags，就能够实现Source Insight的功能，可以很方便地查看分析源代码。\n\n关键词: vim, cscope, ctags, tags\n\n\n1.查看vim是否支持cscope\n> $ vim --version | grep cscope\n\n2.查看帮助\n> $ man cscope\n  $ man ctags\n  :help cscope (vim command)\n\n3.使用cscope[2]\n    当前目录有main.c，其中调用了cstest.c中的print()，此函数在cstest.h中进行了声明。\n    使用下面的命令生成代码的符号索引文件：\n    $ cscope -Rbkq\n    这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。\n\n    其中cscope.out是基本的符号索引，后两个文件是使用\"-q\"选项生成的，可以加快cscope的索引速度。上面命令的参数含义如下：\n    -R: 在生成索引文件时，搜索子目录树中的代码\n    -b: 只生成索引文件，不进入cscope的界面\n    -k: 在生成索引文件时，不搜索/usr/include目录\n    -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度\n    -i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用\"-\"，表示由标准输入获得文件列表。\n    -I dir: 在-I选项指出的目录中查找头文件\n    -u: 扫描所有文件，重新生成交叉索引文件\n    -C: 在搜索时忽略大小写\n    -P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。\n\n    在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，一般不用这个界面，所以使用了\"-b\"选项。如果已经进入了这个界面，按CTRL-D退出。\n\n\t查看阅读c++代码[3]\n    cscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。\n\t如果希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。\n\t当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。\n    下面的命令会查找当前目录及子目录中所有后缀名为\".h\", \".c\", \"cc\"和\".cpp\"的文件，并把查找结果重定向到文件cscope.files中。\n\t然后cscope根据cscope.files中的所有文件，生成符号索引文件。最后一条命令使用ctags命令，\n\t生成一个tags文件，在vim中执行\":help tags\"命令查询它的用法。它可以和cscope一起使用。\n\n    $ find . -name \"*.h\" -o -name \"*.c\" -o -name \"*.cc\" -o \"*.cpp\" > cscope.files\n    $ cscope -bkq -i cscope.files\n    $ ctags -R\n\n    接下来可以在vim里浏览代码了\n    $ vim main.c\n    在vim里命令状态下添加符号索引库\n    : cscope add cscope.out\n    然后可以查看相应的函数定义或文件，ctrl+t返回。\n    : cscope find g print\n    : cscope find f cstest.h\n\n    #注意# 所生成的cscope.out和tags文件要在打开VIM所在的文件夹，否则VIM无法找到相关符号信息。\n\n\n4.创建相应的快捷键\n    将以下内容添加到~/.vimrc中，vim会自动加载当前目录下的符号索引cscope.out，可以使用ctrl+t、ctrl+]等。\n\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    function UpdateCtags()\n         let curdir=getcwd()\n         while !filereadable(\"./tags\")\n             cd ..\n             if getcwd() == \"/\"\n                 break\n             endif\n         endwhile\n         if filewritable(\"./tags\")\n             :!ctags -R\n         endif\n         execute \":cd \" . curdir\n     endfunction\n    \n     function UpdateCStags()\n         let curdir=getcwd()\n         while !filereadable(\"./cscope.out\")\n             cd ..\n             if getcwd() == \"/\"\n                 break\n             endif\n         endwhile\n         if filewritable(\"./cscope.out\")\n             :!cscope -Rbq\n             execute \":cscope kill 0\"\n             execute \":cscope add cscope.out\"\n         endif\n         execute \":cd \" . curdir\n     endfunction\n    \n     nmap <F8> :call UpdateCtags()<CR>\n     nmap <F9> :call UpdateCStags()<CR>\n    \n     \" 这样就可以在更新源代码文件后，随时使用<F8>及<F9>更新tags及cscope.out文件，\n     \" 不必关闭编辑文件，执行ctags -R/cscope -Rbq及重新打开文件。\n    \n     if has(\"cscope\")\n     set cscopetag   \" 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去\n     \" check cscope for definition of a symbol before checking ctags:\n     \" set to 1 if you want the reverse search order.\n     set csto=1\n    \n     \" add any cscope database in current directory\n     if filereadable(\"cscope.out\")\n     cs add cscope.out\n     \" else add the database pointed to by environment variable\n     elseif $CSCOPE_DB !=\"\"\n     cs add $CSCOPE_DB\n     endif\n    \n     \" show msg when any other cscope db added\n     set cscopeverbose\n    \n     nmap <C-\\>s :cs find s <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>g :cs find g <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>c :cs find c <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>t :cs find t <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>e :cs find e <C-R>=expand(\"<cword>\")<CR><CR>\n     nmap <C-\\>f :cs find f <C-R>=expand(\"<cfile>\")<CR><CR>\n     nmap <C-\\>i :cs find i <C-R>=expand(\"<cfile>\")<CR><CR>\n     nmap <C-\\>d :cs find d <C-R>=expand(\"<cword>\")<CR><CR>\n     endif\n    \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\t其中<C-/>g是先同时按ctrl+\\键，之后再按一个g。功能就是查看当前光标所在符号的定义。\n\n5.vim阅读代码\n    添加cscope符号索引数据库后，可以调用\"cscope find\"命令进行查找，vim支持8种cscope的查询功能。\n\t如在代码中查找调用work()函数的函数，可以在vim命令状态下输入\":cs find c work\"，回车即可。还可以进行字符串查找，\n\t它会对双引号或单引号括起来的内容查找。还可以输入一个正则表达式，这类似于egrep程序的功能。\n    :cs help (vim command下查询)\n\n    s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方\n    g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能\n    d: 查找本函数调用的函数\n    c: 查找调用本函数的函数\n    t: 查找指定的字符串\n    e: 查找egrep模式，相当于egrep功能，但查找速度快多了\n    f: 查找并打开文件，类似vim的find功能\n    i: 查找包含本文件的文件\n\n\n6.在vim中使用tags查找符号\n    查看ctags帮助\n    $ man ctags\n    :help ctags  (vim command)\n    :help tags   (vim command)\n\n    在源代码根目录下执行 ctags -R 命令用来为程序源代码生成标签文件，其-R选项表示递归操作，同时为子目录也生成标签文件。\n\tvim利用生成的标签文件，可以进行相应检索、并在不同的文件C语言元素之间来回切换。\n    $ ctags -R\n\n    A) vim中使用\":tag xxx\"跳到函数或数据结构xxx处。使用tag命令时，可以使用TAB键进行匹配查找，继续按TAB键向下切换。\n    某个函数有多个定义时\n\n    D) 运行vim的时候，必须在\"tags\"文件所在的目录下运行。否则，运行vim的时候还要用\":set tags=xxx\"命令设定\"tags\"文件的路径，\n\t这样vim才能找到\"tags\"文件（这儿我们已经设置过了\"set tags=tags;\"，在子目录中也可以使用）。\n\n    E) 在函数中移动光标的快捷键:\n    gd 转到当前光标所指的局部变量的定义\n    * 转到当前光标所指的单词下一次出现的地方\n    # 转到当前光标所指的单词上一次出现的地方\n\n\t:ta tagname 跳转到标签tagname定义的地方\n\t:stag tagname 在分割窗口中查看包含tagname的文件\n\t:tags 查看到达当前位置所经过的标签路径\n\t:ts tagname   :tselect\t列出匹配tagname的标签，如为空，则使用标签栈中最后的标签\n\t如果想跳到包含block的标识符\":tag /block\" 然后用TAB键来选择。这里'/'就是告诉vim 'block'是一个语句块标签。\n\n\t:tf 跳转至第一个匹配的标签\n\t:tlast   :tl 跳转至最后一个匹配的标签\n\t:tnext\t\t\t:tn  跳转到下一个匹配的标签\n\t:[count]tnext\n    :[count]tprevious   :[count] tp     跳到前count个\n\n\t跳转快捷键：\n\tctrl-] ：跳转至光标所在对象定义之处\n\tctrl-t：返回跳转前位置\n\n\n7.taglist插件使用[4]\n    该插件可以像Source Insight那样将当前文件中的宏、全局变量、函数等tag显示在Symbol窗口，用鼠标点上述tag，就跳到该tag定义的位置；\n\t可以按字母序、该tag所属的类或scope，以及该tag在文件中出现的位置进行排序；\n\t如果切换到另外一个文件，Symbol窗口更新显示这个文件中的tag。taglist依赖于ctags。\n\n    要使用taglist插件，必须满足：\n    1).打开VIM的文件类型自动检测功能；\n    2).系统中装了Exuberant ctags工具，并且taglist能够找到此工具（因为taglist需要调用它来生成tag文件）；\n    3).你的VIM支持system()调用；\n\n    安装taglist插件\n    # emerge -av app-vim/taglist\n\n    查看帮助\n    :help helptags\n    :help taglist\n    :help taglist-intro\n\n    打开tag窗口\n    :TlistToggle\n\n    .vimrc中配置如下\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    \" ctags setting\n    set tags=./tags,./../tags,./*/tags;\n    \n    \" Tag list (ctags)\n    \n    filetype on                            \"文件类型自动检测\n    \n    if MySys() == \"windows\"                \"设定windows系统中ctags程序的位置\n       let Tlist_Ctags_Cmd = 'ctags'\n    elseif MySys() == \"linux\"              \"设定linux系统中ctags程序的位置\n       let Tlist_Ctags_Cmd = '/usr/bin/ctags'\n    endif\n    \n    let Tlist_Show_One_File = 1            \"不同时显示多个文件的tag，只显示当前文件的\n    let Tlist_Exit_OnlyWindow = 1          \"如果taglist窗口是最后一个窗口，则退出vim\n    let Tlist_Use_Right_Window = 1         \"在右侧窗口中显示taglist窗口\n    \n    map <silent> <F8> :TlistToggle<cr>     \"在映射F8键打开tags窗口\n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n","slug":"vim-cscope-ctags阅读源码","published":1,"updated":"2021-12-22T06:33:11.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky2q73nb0004a3fd1i53anpo","content":"<p>使用vim + cscope/ctags，就能够实现Source Insight的功能，可以很方便地查看分析源代码。</p>\n<p>关键词: vim, cscope, ctags, tags</p>\n<p>1.查看vim是否支持cscope</p>\n<blockquote>\n<p>$ vim –version | grep cscope</p>\n</blockquote>\n<p>2.查看帮助</p>\n<blockquote>\n<p>$ man cscope<br>  $ man ctags<br>  :help cscope (vim command)</p>\n</blockquote>\n<p>3.使用cscope[2]<br>    当前目录有main.c，其中调用了cstest.c中的print()，此函数在cstest.h中进行了声明。<br>    使用下面的命令生成代码的符号索引文件：<br>    $ cscope -Rbkq<br>    这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。</p>\n<pre><code>其中cscope.out是基本的符号索引，后两个文件是使用&quot;-q&quot;选项生成的，可以加快cscope的索引速度。上面命令的参数含义如下：\n-R: 在生成索引文件时，搜索子目录树中的代码\n-b: 只生成索引文件，不进入cscope的界面\n-k: 在生成索引文件时，不搜索/usr/include目录\n-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度\n-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用&quot;-&quot;，表示由标准输入获得文件列表。\n-I dir: 在-I选项指出的目录中查找头文件\n-u: 扫描所有文件，重新生成交叉索引文件\n-C: 在搜索时忽略大小写\n-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。\n\n在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，一般不用这个界面，所以使用了&quot;-b&quot;选项。如果已经进入了这个界面，按CTRL-D退出。\n\n查看阅读c++代码[3]\ncscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。\n如果希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。\n当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。\n下面的命令会查找当前目录及子目录中所有后缀名为&quot;.h&quot;, &quot;.c&quot;, &quot;cc&quot;和&quot;.cpp&quot;的文件，并把查找结果重定向到文件cscope.files中。\n然后cscope根据cscope.files中的所有文件，生成符号索引文件。最后一条命令使用ctags命令，\n生成一个tags文件，在vim中执行&quot;:help tags&quot;命令查询它的用法。它可以和cscope一起使用。\n\n$ find . -name &quot;*.h&quot; -o -name &quot;*.c&quot; -o -name &quot;*.cc&quot; -o &quot;*.cpp&quot; &gt; cscope.files\n$ cscope -bkq -i cscope.files\n$ ctags -R\n\n接下来可以在vim里浏览代码了\n$ vim main.c\n在vim里命令状态下添加符号索引库\n: cscope add cscope.out\n然后可以查看相应的函数定义或文件，ctrl+t返回。\n: cscope find g print\n: cscope find f cstest.h\n\n#注意# 所生成的cscope.out和tags文件要在打开VIM所在的文件夹，否则VIM无法找到相关符号信息。\n</code></pre>\n<p>4.创建相应的快捷键<br>    将以下内容添加到~/.vimrc中，vim会自动加载当前目录下的符号索引cscope.out，可以使用ctrl+t、ctrl+]等。</p>\n<pre><code>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nfunction UpdateCtags()\n     let curdir=getcwd()\n     while !filereadable(&quot;./tags&quot;)\n         cd ..\n         if getcwd() == &quot;/&quot;\n             break\n         endif\n     endwhile\n     if filewritable(&quot;./tags&quot;)\n         :!ctags -R\n     endif\n     execute &quot;:cd &quot; . curdir\n endfunction\n\n function UpdateCStags()\n     let curdir=getcwd()\n     while !filereadable(&quot;./cscope.out&quot;)\n         cd ..\n         if getcwd() == &quot;/&quot;\n             break\n         endif\n     endwhile\n     if filewritable(&quot;./cscope.out&quot;)\n         :!cscope -Rbq\n         execute &quot;:cscope kill 0&quot;\n         execute &quot;:cscope add cscope.out&quot;\n     endif\n     execute &quot;:cd &quot; . curdir\n endfunction\n\n nmap &lt;F8&gt; :call UpdateCtags()&lt;CR&gt;\n nmap &lt;F9&gt; :call UpdateCStags()&lt;CR&gt;\n\n &quot; 这样就可以在更新源代码文件后，随时使用&lt;F8&gt;及&lt;F9&gt;更新tags及cscope.out文件，\n &quot; 不必关闭编辑文件，执行ctags -R/cscope -Rbq及重新打开文件。\n\n if has(&quot;cscope&quot;)\n set cscopetag   &quot; 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去\n &quot; check cscope for definition of a symbol before checking ctags:\n &quot; set to 1 if you want the reverse search order.\n set csto=1\n\n &quot; add any cscope database in current directory\n if filereadable(&quot;cscope.out&quot;)\n cs add cscope.out\n &quot; else add the database pointed to by environment variable\n elseif $CSCOPE_DB !=&quot;&quot;\n cs add $CSCOPE_DB\n endif\n\n &quot; show msg when any other cscope db added\n set cscopeverbose\n\n nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;i :cs find i &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n endif\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n其中&lt;C-/&gt;g是先同时按ctrl+\\键，之后再按一个g。功能就是查看当前光标所在符号的定义。\n</code></pre>\n<p>5.vim阅读代码<br>    添加cscope符号索引数据库后，可以调用”cscope find”命令进行查找，vim支持8种cscope的查询功能。<br>    如在代码中查找调用work()函数的函数，可以在vim命令状态下输入”:cs find c work”，回车即可。还可以进行字符串查找，<br>    它会对双引号或单引号括起来的内容查找。还可以输入一个正则表达式，这类似于egrep程序的功能。<br>    :cs help (vim command下查询)</p>\n<pre><code>s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方\ng: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能\nd: 查找本函数调用的函数\nc: 查找调用本函数的函数\nt: 查找指定的字符串\ne: 查找egrep模式，相当于egrep功能，但查找速度快多了\nf: 查找并打开文件，类似vim的find功能\ni: 查找包含本文件的文件\n</code></pre>\n<p>6.在vim中使用tags查找符号<br>    查看ctags帮助<br>    $ man ctags<br>    :help ctags  (vim command)<br>    :help tags   (vim command)</p>\n<pre><code>在源代码根目录下执行 ctags -R 命令用来为程序源代码生成标签文件，其-R选项表示递归操作，同时为子目录也生成标签文件。\nvim利用生成的标签文件，可以进行相应检索、并在不同的文件C语言元素之间来回切换。\n$ ctags -R\n\nA) vim中使用&quot;:tag xxx&quot;跳到函数或数据结构xxx处。使用tag命令时，可以使用TAB键进行匹配查找，继续按TAB键向下切换。\n某个函数有多个定义时\n\nD) 运行vim的时候，必须在&quot;tags&quot;文件所在的目录下运行。否则，运行vim的时候还要用&quot;:set tags=xxx&quot;命令设定&quot;tags&quot;文件的路径，\n这样vim才能找到&quot;tags&quot;文件（这儿我们已经设置过了&quot;set tags=tags;&quot;，在子目录中也可以使用）。\n\nE) 在函数中移动光标的快捷键:\ngd 转到当前光标所指的局部变量的定义\n* 转到当前光标所指的单词下一次出现的地方\n# 转到当前光标所指的单词上一次出现的地方\n\n:ta tagname 跳转到标签tagname定义的地方\n:stag tagname 在分割窗口中查看包含tagname的文件\n:tags 查看到达当前位置所经过的标签路径\n:ts tagname   :tselect    列出匹配tagname的标签，如为空，则使用标签栈中最后的标签\n如果想跳到包含block的标识符&quot;:tag /block&quot; 然后用TAB键来选择。这里&#39;/&#39;就是告诉vim &#39;block&#39;是一个语句块标签。\n\n:tf 跳转至第一个匹配的标签\n:tlast   :tl 跳转至最后一个匹配的标签\n:tnext            :tn  跳转到下一个匹配的标签\n:[count]tnext\n:[count]tprevious   :[count] tp     跳到前count个\n\n跳转快捷键：\nctrl-] ：跳转至光标所在对象定义之处\nctrl-t：返回跳转前位置\n</code></pre>\n<p>7.taglist插件使用[4]<br>    该插件可以像Source Insight那样将当前文件中的宏、全局变量、函数等tag显示在Symbol窗口，用鼠标点上述tag，就跳到该tag定义的位置；<br>    可以按字母序、该tag所属的类或scope，以及该tag在文件中出现的位置进行排序；<br>    如果切换到另外一个文件，Symbol窗口更新显示这个文件中的tag。taglist依赖于ctags。</p>\n<pre><code>要使用taglist插件，必须满足：\n1).打开VIM的文件类型自动检测功能；\n2).系统中装了Exuberant ctags工具，并且taglist能够找到此工具（因为taglist需要调用它来生成tag文件）；\n3).你的VIM支持system()调用；\n\n安装taglist插件\n# emerge -av app-vim/taglist\n\n查看帮助\n:help helptags\n:help taglist\n:help taglist-intro\n\n打开tag窗口\n:TlistToggle\n\n.vimrc中配置如下\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; ctags setting\nset tags=./tags,./../tags,./*/tags;\n\n&quot; Tag list (ctags)\n\nfiletype on                            &quot;文件类型自动检测\n\nif MySys() == &quot;windows&quot;                &quot;设定windows系统中ctags程序的位置\n   let Tlist_Ctags_Cmd = &#39;ctags&#39;\nelseif MySys() == &quot;linux&quot;              &quot;设定linux系统中ctags程序的位置\n   let Tlist_Ctags_Cmd = &#39;/usr/bin/ctags&#39;\nendif\n\nlet Tlist_Show_One_File = 1            &quot;不同时显示多个文件的tag，只显示当前文件的\nlet Tlist_Exit_OnlyWindow = 1          &quot;如果taglist窗口是最后一个窗口，则退出vim\nlet Tlist_Use_Right_Window = 1         &quot;在右侧窗口中显示taglist窗口\n\nmap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;cr&gt;     &quot;在映射F8键打开tags窗口\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>使用vim + cscope/ctags，就能够实现Source Insight的功能，可以很方便地查看分析源代码。</p>\n<p>关键词: vim, cscope, ctags, tags</p>\n<p>1.查看vim是否支持cscope</p>\n<blockquote>\n<p>$ vim –version | grep cscope</p>\n</blockquote>\n<p>2.查看帮助</p>\n<blockquote>\n<p>$ man cscope<br>  $ man ctags<br>  :help cscope (vim command)</p>\n</blockquote>\n<p>3.使用cscope[2]<br>    当前目录有main.c，其中调用了cstest.c中的print()，此函数在cstest.h中进行了声明。<br>    使用下面的命令生成代码的符号索引文件：<br>    $ cscope -Rbkq<br>    这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。</p>\n<pre><code>其中cscope.out是基本的符号索引，后两个文件是使用&quot;-q&quot;选项生成的，可以加快cscope的索引速度。上面命令的参数含义如下：\n-R: 在生成索引文件时，搜索子目录树中的代码\n-b: 只生成索引文件，不进入cscope的界面\n-k: 在生成索引文件时，不搜索/usr/include目录\n-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度\n-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用&quot;-&quot;，表示由标准输入获得文件列表。\n-I dir: 在-I选项指出的目录中查找头文件\n-u: 扫描所有文件，重新生成交叉索引文件\n-C: 在搜索时忽略大小写\n-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。\n\n在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，一般不用这个界面，所以使用了&quot;-b&quot;选项。如果已经进入了这个界面，按CTRL-D退出。\n\n查看阅读c++代码[3]\ncscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过C++及Java后缀的文件。\n如果希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文件。\n当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。\n下面的命令会查找当前目录及子目录中所有后缀名为&quot;.h&quot;, &quot;.c&quot;, &quot;cc&quot;和&quot;.cpp&quot;的文件，并把查找结果重定向到文件cscope.files中。\n然后cscope根据cscope.files中的所有文件，生成符号索引文件。最后一条命令使用ctags命令，\n生成一个tags文件，在vim中执行&quot;:help tags&quot;命令查询它的用法。它可以和cscope一起使用。\n\n$ find . -name &quot;*.h&quot; -o -name &quot;*.c&quot; -o -name &quot;*.cc&quot; -o &quot;*.cpp&quot; &gt; cscope.files\n$ cscope -bkq -i cscope.files\n$ ctags -R\n\n接下来可以在vim里浏览代码了\n$ vim main.c\n在vim里命令状态下添加符号索引库\n: cscope add cscope.out\n然后可以查看相应的函数定义或文件，ctrl+t返回。\n: cscope find g print\n: cscope find f cstest.h\n\n#注意# 所生成的cscope.out和tags文件要在打开VIM所在的文件夹，否则VIM无法找到相关符号信息。\n</code></pre>\n<p>4.创建相应的快捷键<br>    将以下内容添加到~/.vimrc中，vim会自动加载当前目录下的符号索引cscope.out，可以使用ctrl+t、ctrl+]等。</p>\n<pre><code>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nfunction UpdateCtags()\n     let curdir=getcwd()\n     while !filereadable(&quot;./tags&quot;)\n         cd ..\n         if getcwd() == &quot;/&quot;\n             break\n         endif\n     endwhile\n     if filewritable(&quot;./tags&quot;)\n         :!ctags -R\n     endif\n     execute &quot;:cd &quot; . curdir\n endfunction\n\n function UpdateCStags()\n     let curdir=getcwd()\n     while !filereadable(&quot;./cscope.out&quot;)\n         cd ..\n         if getcwd() == &quot;/&quot;\n             break\n         endif\n     endwhile\n     if filewritable(&quot;./cscope.out&quot;)\n         :!cscope -Rbq\n         execute &quot;:cscope kill 0&quot;\n         execute &quot;:cscope add cscope.out&quot;\n     endif\n     execute &quot;:cd &quot; . curdir\n endfunction\n\n nmap &lt;F8&gt; :call UpdateCtags()&lt;CR&gt;\n nmap &lt;F9&gt; :call UpdateCStags()&lt;CR&gt;\n\n &quot; 这样就可以在更新源代码文件后，随时使用&lt;F8&gt;及&lt;F9&gt;更新tags及cscope.out文件，\n &quot; 不必关闭编辑文件，执行ctags -R/cscope -Rbq及重新打开文件。\n\n if has(&quot;cscope&quot;)\n set cscopetag   &quot; 使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳来跳去\n &quot; check cscope for definition of a symbol before checking ctags:\n &quot; set to 1 if you want the reverse search order.\n set csto=1\n\n &quot; add any cscope database in current directory\n if filereadable(&quot;cscope.out&quot;)\n cs add cscope.out\n &quot; else add the database pointed to by environment variable\n elseif $CSCOPE_DB !=&quot;&quot;\n cs add $CSCOPE_DB\n endif\n\n &quot; show msg when any other cscope db added\n set cscopeverbose\n\n nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;i :cs find i &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;\n endif\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n其中&lt;C-/&gt;g是先同时按ctrl+\\键，之后再按一个g。功能就是查看当前光标所在符号的定义。\n</code></pre>\n<p>5.vim阅读代码<br>    添加cscope符号索引数据库后，可以调用”cscope find”命令进行查找，vim支持8种cscope的查询功能。<br>    如在代码中查找调用work()函数的函数，可以在vim命令状态下输入”:cs find c work”，回车即可。还可以进行字符串查找，<br>    它会对双引号或单引号括起来的内容查找。还可以输入一个正则表达式，这类似于egrep程序的功能。<br>    :cs help (vim command下查询)</p>\n<pre><code>s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方\ng: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能\nd: 查找本函数调用的函数\nc: 查找调用本函数的函数\nt: 查找指定的字符串\ne: 查找egrep模式，相当于egrep功能，但查找速度快多了\nf: 查找并打开文件，类似vim的find功能\ni: 查找包含本文件的文件\n</code></pre>\n<p>6.在vim中使用tags查找符号<br>    查看ctags帮助<br>    $ man ctags<br>    :help ctags  (vim command)<br>    :help tags   (vim command)</p>\n<pre><code>在源代码根目录下执行 ctags -R 命令用来为程序源代码生成标签文件，其-R选项表示递归操作，同时为子目录也生成标签文件。\nvim利用生成的标签文件，可以进行相应检索、并在不同的文件C语言元素之间来回切换。\n$ ctags -R\n\nA) vim中使用&quot;:tag xxx&quot;跳到函数或数据结构xxx处。使用tag命令时，可以使用TAB键进行匹配查找，继续按TAB键向下切换。\n某个函数有多个定义时\n\nD) 运行vim的时候，必须在&quot;tags&quot;文件所在的目录下运行。否则，运行vim的时候还要用&quot;:set tags=xxx&quot;命令设定&quot;tags&quot;文件的路径，\n这样vim才能找到&quot;tags&quot;文件（这儿我们已经设置过了&quot;set tags=tags;&quot;，在子目录中也可以使用）。\n\nE) 在函数中移动光标的快捷键:\ngd 转到当前光标所指的局部变量的定义\n* 转到当前光标所指的单词下一次出现的地方\n# 转到当前光标所指的单词上一次出现的地方\n\n:ta tagname 跳转到标签tagname定义的地方\n:stag tagname 在分割窗口中查看包含tagname的文件\n:tags 查看到达当前位置所经过的标签路径\n:ts tagname   :tselect    列出匹配tagname的标签，如为空，则使用标签栈中最后的标签\n如果想跳到包含block的标识符&quot;:tag /block&quot; 然后用TAB键来选择。这里&#39;/&#39;就是告诉vim &#39;block&#39;是一个语句块标签。\n\n:tf 跳转至第一个匹配的标签\n:tlast   :tl 跳转至最后一个匹配的标签\n:tnext            :tn  跳转到下一个匹配的标签\n:[count]tnext\n:[count]tprevious   :[count] tp     跳到前count个\n\n跳转快捷键：\nctrl-] ：跳转至光标所在对象定义之处\nctrl-t：返回跳转前位置\n</code></pre>\n<p>7.taglist插件使用[4]<br>    该插件可以像Source Insight那样将当前文件中的宏、全局变量、函数等tag显示在Symbol窗口，用鼠标点上述tag，就跳到该tag定义的位置；<br>    可以按字母序、该tag所属的类或scope，以及该tag在文件中出现的位置进行排序；<br>    如果切换到另外一个文件，Symbol窗口更新显示这个文件中的tag。taglist依赖于ctags。</p>\n<pre><code>要使用taglist插件，必须满足：\n1).打开VIM的文件类型自动检测功能；\n2).系统中装了Exuberant ctags工具，并且taglist能够找到此工具（因为taglist需要调用它来生成tag文件）；\n3).你的VIM支持system()调用；\n\n安装taglist插件\n# emerge -av app-vim/taglist\n\n查看帮助\n:help helptags\n:help taglist\n:help taglist-intro\n\n打开tag窗口\n:TlistToggle\n\n.vimrc中配置如下\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; ctags setting\nset tags=./tags,./../tags,./*/tags;\n\n&quot; Tag list (ctags)\n\nfiletype on                            &quot;文件类型自动检测\n\nif MySys() == &quot;windows&quot;                &quot;设定windows系统中ctags程序的位置\n   let Tlist_Ctags_Cmd = &#39;ctags&#39;\nelseif MySys() == &quot;linux&quot;              &quot;设定linux系统中ctags程序的位置\n   let Tlist_Ctags_Cmd = &#39;/usr/bin/ctags&#39;\nendif\n\nlet Tlist_Show_One_File = 1            &quot;不同时显示多个文件的tag，只显示当前文件的\nlet Tlist_Exit_OnlyWindow = 1          &quot;如果taglist窗口是最后一个窗口，则退出vim\nlet Tlist_Use_Right_Window = 1         &quot;在右侧窗口中显示taglist窗口\n\nmap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;cr&gt;     &quot;在映射F8键打开tags窗口\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}